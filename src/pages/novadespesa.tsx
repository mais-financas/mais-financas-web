import { useState, useEffect } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useRouter } from 'next/router';


const inter = Inter({ subsets: ['latin'] })

export default function Home( {data} ) {

  const router = useRouter();

  const [dataForm, setdataForm] = useState({
        Nome        : '',
        Valor       : '',
        Categoria   : '',
        Recorrencia : ''
  });

  const onChangeInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    setdataForm({ ...dataForm, [e.target.name]: e.target.value });
  };

  const sendContact = async (e: React.ChangeEvent<HTMLInputElement>) => {
    e.preventDefault();
    console.log(dataForm);
    
    try {
        await fetch('http://localhost:8080/add-despesa', {
            method: 'POST',
            body: JSON.stringify(dataForm),
            headers: { 'Content-Type': 'application/json' }
        });
         // Redirecionar o usuário após o cadastro
        router.push('/financas'); // Substitua '/pagina-de-sucesso' pela rota desejada
    } catch (error) {
        console.log("Erro ao enviar os dados");
    }
  }

  const [recorrencias, setRecorrencias] = useState([]); // Para armazenar as opções de recorrência
  const handleCancelarClick = () => {
    router.back();
  };

    // Função para buscar opções de recorrência do banco de dados
    const fetchRecorrencias = async () => {
    try {
        const response = await fetch('http://localhost:8080/Recorrencia'); // Rota no backend para buscar as recorrências
        const data = await response.json();
        setRecorrencias(data.recorrencias); // Supondo que o backend envie as recorrências em um campo chamado "recorrencias"
    } catch (error) {
        console.error("Erro ao buscar recorrências: " + error);
    }
    };

    useEffect(() => {
        const fetchRecorrencias = async () => {
          try {
            const response = await fetch('http://localhost:8080/Recorrencia');
            const data = await response.json();
            setRecorrencias(data.erro ? [] : data.datarec.map((rec) => rec.Nome));
          } catch (error) {
            console.error("Erro ao buscar recorrências: " + error);
          }
        };
      
        fetchRecorrencias();
      }, []);
      
  
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
          
            <h1>Adicionar Despesas</h1>
            <form className={styles.ContainerDespesa} onSubmit={sendContact}>    
                    <div className={styles.form__group}>
                        <input type="text" className={styles.form__field} placeholder="Nome" name="Nome" id="Nome" onChange={onChangeInput} value={dataForm.name} required/>
                        <label htmlFor="Nome" className={styles.form__label}>
                            Nome
                        </label>
                    </div>

                    <div className={styles.form__group}>
                        <input type="number" className={styles.form__field} placeholder="Valor" name="Valor" id="Valor"  onChange={onChangeInput} value={dataForm.Valor} required/>
                        <label htmlFor="Valor" className={styles.form__label}>
                            R$ Valor
                        </label>
                    </div>

                    <div className={styles.form__group}>
                    <select className={styles.form__field} placeholder="Categoria" name="Categoria" id="Categoria" onChange={onChangeInput} value={dataForm.Categoria} required>
                            <option value="" disabled selected>Selecione a Categoria</option>
                            {data.datahome.map((categoria, index) => (
                                <option key={index} value={categoria.Nome}>
                                    {categoria.Nome}
                                </option>
                            ))}
                        </select>
                        <label htmlFor="Categoria" className={styles.form__label}>
                            Categoria
                        </label>
                    </div>

                    <div className={styles.form__group}>
                        <select className={styles.form__field} name="Recorrencia" id="Recorrencia" onChange={onChangeInput} value={dataForm.Recorrencia} required>
                        <option value="">Selecione a Recorrência</option>
                        {recorrencias.map((recorrencia, index) => (
                            <option key={index} value={recorrencia}>
                            {recorrencia}
                            </option>
                        ))}
                        </select>
                        <label htmlFor="Recorrencia" className={styles.form__label}>
                            Recorrência
                        </label>
                    </div>

                    <button className={styles.button} onClick={handleCancelarClick}>
                        Cancelar
                    </button>
                    <button className={`${styles.button} ${styles.cancelar}`} type="submit">
                        Enviar
                    </button>
            </form>

      </main>
    </>
  );
}



export async function getServerSideProps() {
    
    const response = await fetch(`http://localhost:8080/`);
    const data = await response.json();
    return { props: { data } };
  }
  
  