import Head from 'next/head';
import { useEffect, useState } from 'react';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import { useRouter } from 'next/router';

const inter = Inter({ subsets: ['latin'] });

export default function Home() {
  const router = useRouter();
  const [despesas, setDespesas] = useState([]);
  const [ganhos, setGanhos] = useState([]);
  const [categories, setCategories] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [totalValue, setTotalValue] = useState(0);
  const [totalGanhos, setTotalGanhos] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 2;

  const fetchCategories = () => {
    fetch('http://localhost:8080/categories')
      .then((response) => response.json())
      .then((data) => setCategories(data.categories))
      .catch((error) => console.error('Erro ao obter categorias:', error));
  };

  useEffect(() => {
    fetchCategories();
  }, []);

  useEffect(() => {
    fetch('http://localhost:8080/despesas')
      .then((response) => response.json())
      .then((data) => setDespesas(data.despesas))
      .catch((error) => console.error('Erro ao obter despesas:', error));

    fetch('http://localhost:8080/ganhos')
      .then((response) => response.json())
      .then((data) => setGanhos(data.ganhos))
      .catch((error) => console.error('Erro ao obter ganhos:', error));
  }, []);

  useEffect(() => {
    const filteredExpenses = despesas.filter((item) =>
      selectedCategory ? item.Categoria === selectedCategory : true
    );
    const total = filteredExpenses.reduce((acc, item) => acc + item.Valor, 0);
    setTotalValue(total);
  }, [despesas, selectedCategory]);

  useEffect(() => {
    const filteredGanhos = ganhos.filter((item) =>
      selectedCategory ? item.Categoria === selectedCategory : true
    );
    const totalGanhosValue = filteredGanhos.reduce((acc, item) => acc + item.Valor, 0);
    setTotalGanhos(totalGanhosValue);
  }, [ganhos, selectedCategory]);

  const handleFinancasClick = () => {
    router.push('/financas');
  };

  const handlerelatoriosClick = () => {
    router.push('/relatorio');
  };

  const handleEstatisticaClick = () => {
    router.push('/estatistica');
  };

  const handleConsultoriaClick = () => {
    router.push('/consultoria');
  };

  const nextPage = () => {
    setCurrentPage((prevPage) => prevPage + 1);
  };

  const prevPage = () => {
    setCurrentPage((prevPage) => prevPage - 1);
  };

  const itemsToShow = despesas
    .concat(ganhos)
    .filter((item) =>
      selectedCategory ? item.Categoria === selectedCategory : true
    )
    .sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt)) // Ordena por data de atualização, do mais recente para o mais antigo;

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;

  const currentItems = itemsToShow.slice(indexOfFirstItem, indexOfLastItem);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <ul className={styles.menu}>
          <li>
            <a onClick={handleFinancasClick}>+Finanças</a>
          </li>
          <li>
            <a onClick={handlerelatoriosClick}>relatorios</a>
          </li>
          <li>
            <a onClick={handleEstatisticaClick}>Estátistica</a>
          </li>
          <li>
            <a onClick={handleConsultoriaClick}>Consultoria</a>
          </li>
        </ul>
        <div className={styles.Bot}>
          <div className={styles.totalContainer}>
            <p className={styles.totalExpenses}>Total das despesas: R$ {totalValue.toFixed(2)}</p>
            <p className={styles.totalGanhos}>Total dos ganhos: R$ {totalGanhos.toFixed(2)}</p>
          </div>
          <div className={styles.selectContainer}>
            <select
              onChange={(e) => setSelectedCategory(e.target.value)}
              value={selectedCategory || ''}
              className={styles.select}
            >
              <option value="">Todas as categorias</option>
              {categories.map((category) => (
                <option key={category} value={category}>
                  {category}
                </option>
              ))}
            </select>
          </div>
          <ul className={styles.expensesList}>
            {currentItems.map((item) => (
              <li key={item.id} className={item.Recorrencia ? styles.expenseCard : styles.gainCard}>
                <div className={styles.upperSection}>
                  <div className={styles.typeAndValue}>
                    <p className={styles.expenseType}>{item.Categoria}</p>
                    <p className={styles.expenseValue}>R$ {item.Valor}</p>
                  </div>
                </div>
                <div className={styles.lowerSection}>
                  <div className={styles.info}>
                    <div className={styles.infoRow}>
                      {item.hasOwnProperty('Recorrencia') && (
                        <>
                          <label>Recorrência:</label>
                          <input type='text' disabled value={item.Recorrencia} />
                        </>
                      )}
                      {item.hasOwnProperty('Descricao') && (
                        <>
                          <label>Descrição:</label>
                          <input type='text' disabled value={item.Descricao} />
                        </>
                      )}
                    </div>
                    <div className={styles.infoRow}>
                      <label>Nome:</label>
                      <input type='text' disabled value={item.Nome} />
                    </div>
                  </div>
                </div>
              </li>
            ))}
          </ul>
          <div className={styles.pagination}>
            <button onClick={prevPage} disabled={currentPage === 1}>
              Anterior
            </button>
            <button onClick={nextPage} disabled={indexOfLastItem >= itemsToShow.length}>
              Próxima
            </button>
          </div>
        </div>
      </main>
    </>
  );
}
